{"version":3,"sources":["./src/app/modules/email-verification/email-verification.module.ts","./src/app/service/email-verification.service.ts","./src/app/modules/email-verification/email-verification-routing.module.ts","./src/app/modules/email-verification/email-verification-home/email-verification-home.component.html","./src/app/modules/email-verification/email-verification-home/email-verification-home.component.ts"],"names":[],"mappings":"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","file":"modules-email-verification-email-verification-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { EmailVerificationRoutingModule } from './email-verification-routing.module';\nimport { EmailVerificationHomeComponent } from './email-verification-home/email-verification-home.component';\n\n\n@NgModule({\n  declarations: [EmailVerificationHomeComponent],\n  imports: [\n    CommonModule,\n    EmailVerificationRoutingModule,\n    MatProgressSpinnerModule\n  ]\n})\nexport class EmailVerificationModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { enviroment } from '../../environments/environment';\n\nimport { MailRespone as EmailVerificationRespone } from '../modules/models/Mail';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmailVerificationService {\n  headers = new HttpHeaders()\n    .set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private activatedRoute: ActivatedRoute\n  ) { }\n\n  emailVerification(): Observable<EmailVerificationRespone>{\n    let token: string;\n    this.activatedRoute.queryParams.subscribe(params => {\n        token = params['token'];\n    });\n\n    return this.http.get<EmailVerificationRespone>(`${enviroment.rootURL}/verification?token=${token}`, { headers: this.headers });\n  }\n}\n\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { EmailVerificationHomeComponent } from './email-verification-home/email-verification-home.component';\n\nconst routes: Routes = [\n  { path: '', component: EmailVerificationHomeComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class EmailVerificationRoutingModule { }\n","<div class=\"email-verification-container\" *ngIf=\"!isLoading\">\n  <ng-container *ngIf=\"success\">\n    <h1>Welcome!</h1>\n    <p>{{ message }}</p>\n    <p>You can <a routerLink=\"/join/login\">log in</a> now!</p>\n  </ng-container>\n\n  <ng-container *ngIf=\"!success\">\n    <h1>Sorry!</h1>\n    <p>{{ message }}</p>\n    <p>Back <a routerLink=\"/\">home</a>.</p>\n  </ng-container>\n</div>\n<div class=\"spinner\" *ngIf=\"isLoading\">\n  <mat-spinner [diameter]=\"50\"></mat-spinner>\n</div>\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { EmailVerificationService } from '../../../service/email-verification.service';\n\n@Component({\n  selector: 'app-email-verification-home',\n  templateUrl: './email-verification-home.component.html',\n  styleUrls: ['./email-verification-home.component.css']\n})\nexport class EmailVerificationHomeComponent implements OnInit {\n  message: string;\n  success: boolean;\n  isLoading = false;\n  constructor(private emailVerificationService: EmailVerificationService) { }\n\n  ngOnInit(): void {\n    this.isLoading = true;\n    this.emailVerificationService.emailVerification().subscribe({\n      next: (respone) => {\n        this.message = respone.message;\n        this.success = true;\n        this.isLoading = false;\n      },\n      error: (error: HttpErrorResponse) => {\n        this.success = false;\n        this.message = 'Something went wrong. Maybe your token is invalid or has expired.';\n        this.isLoading = false;\n      }\n    });\n  }\n}\n"],"sourceRoot":"webpack:///"}