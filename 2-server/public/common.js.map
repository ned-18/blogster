{"version":3,"sources":["./src/app/modules/validators/checkPassword.ts","./src/app/service/comments.service.ts","./src/app/modules/validators/checkPasswords.ts","./src/app/modules/validators/checkEmail.ts"],"names":[],"mappings":";;;;;;;;;;AAEA;AAAA;AAAO,SAAS,aAAa,CAAC,OAAoB;IAC9C,IAAM,UAAU,GAAG,wEAAwE,CAAC;IAE5F,OAAO,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,kBAAkB,EAAE,IAAI,EAAC;AAC9E,CAAC;;;;;;;;;;;;;ACLD;AAAA;AAAA;AAAA;AAAA;AAA+D;AAEH;;;AAWrD,MAAM,eAAe;IAI1B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAHpC,YAAO,GAAG,IAAI,gEAAW,EAAE;aACxB,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;IAEJ,CAAC;IAExC,mBAAmB;IACnB,WAAW,CAAC,MAAc;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAoB,GAAG,oEAAU,CAAC,OAAO,oBAAoB,MAAM,EAAE,CAAC,CAAC;IAC7F,CAAC;IAED,iBAAiB;IACjB,WAAW,CAAC,MAAc,EAAE,OAA0B;QACpD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAqB,GAAG,oEAAU,CAAC,OAAO,mBAAmB,MAAM,EAAE,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAClI,CAAC;IAED,iBAAiB;IACjB,aAAa,CAAC,SAAiB;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAuB,GAAG,oEAAU,CAAC,OAAO,YAAY,SAAS,EAAE,CAAC,CAAC;IAC9F,CAAC;;8EAnBU,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFd,MAAM;;;;;;;;;;;;;;;;;ACRb,MAAM,cAAc;IACvB,QAAQ,CAAC,SAAoB;QACzB,MAAM,EAAE,QAAQ,EAAE,eAAe,EAAE,GAAG,SAAS,CAAC,KAAK,CAAC;QAEtD,IAAI,QAAQ,KAAK,eAAe,EAAE;YAC9B,OAAO,IAAI,CAAC;SACf;aAAM;YACH,OAAO,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC;SACvC;IACL,CAAC;;4EATQ,cAAc;iGAAd,cAAc,WAAd,cAAc,mBADD,MAAM;;;;;;;;;;;;;ACDhC;AAAA;AAAO,SAAS,UAAU,CAAC,OAAoB;IAC3C,IAAI,OAAO,GAAG,uJAAuJ,CAAC;IAEtK,OAAO,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,eAAe,EAAE,IAAI,EAAC;AACxE,CAAC","file":"common.js","sourcesContent":["import { FormControl } from '@angular/forms';\r\n\r\nexport function checkPassword(control: FormControl) {\r\n    let   passwordRe = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,60}$/;\r\n\r\n    return passwordRe.test(control.value) ? null : { passwordIsNotValid: true}\r\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { enviroment } from '../../environments/environment';\n\nimport {\n  GetCommentRespone,\n  PostCommentRespone,\n  DeleteCommentRespone,\n} from '../modules/models/Comment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommentsService {\n  headers = new HttpHeaders()\n    .set('Content-Type', 'application/json');\n\n  constructor(private http: HttpClient) {}\n\n  // Get all comments\n  getComments(postId: number): Observable<GetCommentRespone> {\n    return this.http.get<GetCommentRespone>(`${enviroment.rootURL}/comments?postId=${postId}`);\n  }\n\n  // Create comment\n  postComment(postId: number, comment: {comment: string}): Observable<PostCommentRespone> {\n    return this.http.post<PostCommentRespone>(`${enviroment.rootURL}/comment?postId=${postId}`, comment, { headers: this.headers });\n  }\n\n  // Delete comment\n  deleteComment(commentId: number): Observable<DeleteCommentRespone> {\n    return this.http.delete<DeleteCommentRespone>(`${enviroment.rootURL}/comment/${commentId}`);\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Validator, FormGroup } from '@angular/forms';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CheckPasswords implements Validator {\r\n    validate(formGroup: FormGroup) {\r\n        const { password, confirmPassword } = formGroup.value;\r\n\r\n        if (password === confirmPassword) {\r\n            return null;\r\n        } else {\r\n            return { passwordsDontMatch: true };\r\n        }\r\n    }\r\n}","import { FormControl } from '@angular/forms';\r\n\r\nexport function checkEmail(control: FormControl) {\r\n    let emailRe = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n    return emailRe.test(control.value) ? null : { emailIsNotValid: true}\r\n}"],"sourceRoot":"webpack:///"}