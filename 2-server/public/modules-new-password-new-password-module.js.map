{"version":3,"sources":["./src/app/service/new-password.service.ts","./src/app/modules/new-password/reset-password/reset-password.component.ts","./src/app/modules/new-password/reset-password/reset-password.component.html","./src/app/modules/new-password/forgot-password/forgot-password.component.ts","./src/app/modules/new-password/forgot-password/forgot-password.component.html","./src/app/modules/new-password/new-password.module.ts","./src/app/modules/new-password/new-password-routing.module.ts"],"names":[],"mappings":"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","file":"modules-new-password-new-password-module.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { enviroment } from '../../environments/environment';\n\nimport { MailRespone as PasswordRespone } from '../modules/models/Mail';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewPasswordService {\n  headers = new HttpHeaders()\n    .set('Content-Type', 'application/json');\n\n  constructor(\n    private http: HttpClient,\n    private activatedRoute: ActivatedRoute\n  ) { }\n\n  forgotPassword(email: string): Observable<PasswordRespone> {\n    return this.http.post<PasswordRespone>(`${enviroment.rootURL}/forgot-password`, email, { headers: this.headers });\n  }\n\n  resetPassword(passwords: string): Observable<PasswordRespone> {\n    let token: string;\n    this.activatedRoute.queryParams.subscribe(params => {\n        token = params['token'];\n    });\n\n    return this.http.post<PasswordRespone>(`${enviroment.rootURL}/reset-password?token=${token}`, passwords, { headers: this.headers });\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { NewPasswordService } from '../../../service/new-password.service';\nimport { catchError } from '../../../helpers/catchError';\n\nimport { checkPassword } from '../../validators/checkPassword';\nimport { CheckPasswords } from '../../validators/checkPasswords';\n\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.css']\n})\nexport class ResetPasswordComponent implements OnInit {\n  isLoading = false;\n  resetPasswordForm = new FormGroup({\n    password: new FormControl(null, [checkPassword]),\n    confirmPassword: new FormControl(null, [checkPassword])\n  }, { validators: [this.checkPasswords.validate] });\n  constructor(\n    private checkPasswords: CheckPasswords,\n    private newPasswordService: NewPasswordService,\n    private toastr: ToastrService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void { }\n\n  onSubmit(): void {\n    this.isLoading = true;\n    this.newPasswordService.resetPassword(this.resetPasswordForm.value).subscribe({\n      next: (respone) => {\n        this.toastr.success(respone.message);\n        this.isLoading = false;\n        this.router.navigate(['/join/login']);\n        this.resetPasswordForm.reset();\n      },\n      error: (error: HttpErrorResponse) => {\n        catchError(this.toastr, this.isLoading);\n      }\n    });\n  }\n}\n\n","<div class=\"password-container\">\n  <h1>Reset your password</h1>\n  <p>Please enter new password!</p>\n  <form\n    [formGroup]=\"resetPasswordForm\"\n    (ngSubmit)=\"onSubmit()\"\n    *ngIf=\"!isLoading\"\n  >\n    <app-input\n      [name]=\"'password'\"\n      [control]=\"resetPasswordForm.get('password')\"\n      [label]=\"'Password'\"\n      [type]=\"'password'\"\n      [maxlength]=\"'60'\"\n    ></app-input>\n    <app-input\n      [name]=\"'confirmPassword'\"\n      [control]=\"resetPasswordForm.get('confirmPassword')\"\n      [label]=\"'Confirm password'\"\n      [type]=\"'password'\"\n      [maxlength]=\"'60'\"\n    ></app-input>\n    <button\n      class=\"button button--reset-password\"\n      type=\"submit\"\n      [disabled]=\"resetPasswordForm.invalid\"\n    >\n      Reset Password\n    </button>\n  </form>\n  <p class=\"back\" *ngIf=\"!isLoading\">Go <a routerLink=\"/\">home</a></p>\n  <div class=\"spinner\" *ngIf=\"isLoading\">\n    <mat-spinner [diameter]=\"50\"></mat-spinner>\n  </div>\n</div>\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { NewPasswordService } from '../../../service/new-password.service';\nimport { catchError } from '../../../helpers/catchError';\n\nimport { checkEmail } from '../../validators/checkEmail';\n\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.css']\n})\nexport class ForgotPasswordComponent implements OnInit {\n  isLoading = false;\n  forgotPasswordForm = new FormGroup({\n    email: new FormControl(null, [checkEmail])\n  });\n  constructor(\n    private newPasswordService: NewPasswordService,\n    private toastr: ToastrService,\n  ) { }\n\n  ngOnInit(): void { }\n\n  onSubmit(): void {\n    this.isLoading = true;\n    this.newPasswordService.forgotPassword(this.forgotPasswordForm.value).subscribe({\n      next: (respone) => {\n        this.toastr.success(respone.message);\n        this.forgotPasswordForm.reset();\n        this.isLoading = false;\n      },\n      error: (error: HttpErrorResponse) => {\n        catchError(this.toastr, this.isLoading);\n      }\n    });\n  }\n}\n","<div class=\"password-container\">\n  <h1>Forgot Password</h1>\n  <p>Please enter your email to get mail with link to reset your password!</p>\n  <form\n    [formGroup]=\"forgotPasswordForm\"\n    (ngSubmit)=\"onSubmit()\"\n    *ngIf=\"!isLoading\"\n  >\n    <app-input\n      [name]=\"'email'\"\n      [control]=\"forgotPasswordForm.get('email')\"\n      [label]=\"'Email'\"\n      [maxlength]=\"'60'\"\n    ></app-input>\n    <button\n      class=\"button button--forgot-password\"\n      type=\"submit\"\n      [disabled]=\"forgotPasswordForm.invalid\"\n    >\n      Reset Password\n    </button>\n  </form>\n  <p class=\"back\" *ngIf=\"!isLoading\">Go <a routerLink=\"/\">home</a></p>\n  <div class=\"spinner\" *ngIf=\"isLoading\">\n    <mat-spinner [diameter]=\"50\"></mat-spinner>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { SharedModule } from '../../shared/shared.module';\n\nimport { NewPasswordRoutingModule } from './new-password-routing.module';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\n\n@NgModule({\n  declarations: [ForgotPasswordComponent, ResetPasswordComponent],\n  imports: [\n    CommonModule,\n    NewPasswordRoutingModule,\n    ReactiveFormsModule,\n    MatProgressSpinnerModule,\n    SharedModule\n  ]\n})\nexport class NewPasswordModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\n\nconst routes: Routes = [\n  { path: 'forgot-password', component: ForgotPasswordComponent },\n  { path: 'reset-password', component: ResetPasswordComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class NewPasswordRoutingModule { }\n"],"sourceRoot":"webpack:///"}